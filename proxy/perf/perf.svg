<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>muduo::net::EventLoop::isInLoopThread (28,037,108 samples, 0.53%)</title><rect x="793.8" y="453" width="6.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="796.81" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (7,934,913 samples, 0.15%)</title><rect x="1086.8" y="341" width="1.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1089.77" y="351.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::function&lt;void  (60,189,580 samples, 1.13%)</title><rect x="161.9" y="453" width="13.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="164.94" y="463.5" ></text>
</g>
<g >
<title>operator new (11,034,612 samples, 0.21%)</title><rect x="1082.8" y="437" width="2.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1085.78" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (32,211,045 samples, 0.61%)</title><rect x="378.0" y="469" width="7.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="381.02" y="479.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (70,250,787 samples, 1.32%)</title><rect x="188.1" y="405" width="15.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="191.14" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Socket&gt;::operator (53,748,131 samples, 1.01%)</title><rect x="1005.1" y="181" width="11.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1008.11" y="191.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (11,094,790 samples, 0.21%)</title><rect x="180.4" y="501" width="2.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="183.40" y="511.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (19,612,480 samples, 0.37%)</title><rect x="199.4" y="341" width="4.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="202.38" y="351.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (16,408,873 samples, 0.31%)</title><rect x="411.6" y="453" width="3.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="414.56" y="463.5" ></text>
</g>
<g >
<title>ProxyServer::onSpecialMsg (78,031,114 samples, 1.47%)</title><rect x="39.6" y="549" width="17.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="42.60" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,173,690 samples, 0.76%)</title><rect x="479.3" y="421" width="8.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="482.30" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (53,983,203 samples, 1.02%)</title><rect x="415.2" y="437" width="12.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="418.20" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (18,153,897 samples, 0.34%)</title><rect x="465.2" y="485" width="4.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="468.25" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (52,509,485 samples, 0.99%)</title><rect x="354.4" y="357" width="11.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="357.38" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (60,189,580 samples, 1.13%)</title><rect x="161.9" y="485" width="13.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="164.94" y="495.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (10,350,540 samples, 0.19%)</title><rect x="1071.0" y="405" width="2.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1073.97" y="415.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;char*, unsigned long, char&gt; (15,988,560 samples, 0.30%)</title><rect x="366.0" y="357" width="3.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="369.04" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (30,574,413 samples, 0.58%)</title><rect x="631.6" y="421" width="6.8" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="634.61" y="431.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~tuple (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="389" width="1.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1140.87" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="309" width="1.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1140.87" y="319.5" ></text>
</g>
<g >
<title>muduo::detail::AtomicIntegerT&lt;int&gt;::get (24,426,285 samples, 0.46%)</title><rect x="1165.4" y="405" width="5.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1168.43" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (11,034,612 samples, 0.21%)</title><rect x="1082.8" y="421" width="2.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1085.78" y="431.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (77,311,442 samples, 1.45%)</title><rect x="207.4" y="501" width="17.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="210.40" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_free (87,229,459 samples, 1.64%)</title><rect x="960.1" y="101" width="19.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="963.07" y="111.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,100,542 samples, 0.19%)</title><rect x="1060.4" y="389" width="2.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1063.44" y="399.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::function&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="469" width="56.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="963.07" y="479.5" >std::_..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (66,604,056 samples, 1.25%)</title><rect x="1109.3" y="389" width="14.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1112.27" y="399.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (11,034,612 samples, 0.21%)</title><rect x="1082.8" y="469" width="2.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1085.78" y="479.5" ></text>
</g>
<g >
<title>tcache_put (8,776,818 samples, 0.17%)</title><rect x="33.5" y="389" width="2.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="36.54" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;void  (7,642,084 samples, 0.14%)</title><rect x="1148.9" y="533" width="1.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1151.94" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::_Tuple_impl&lt;muduo::net::TcpServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, void&gt; (11,612,821 samples, 0.22%)</title><rect x="1127.6" y="437" width="2.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1130.57" y="447.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::removeConnectionInLoop (19,620,280 samples, 0.37%)</title><rect x="1021.4" y="453" width="4.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1024.36" y="463.5" ></text>
</g>
<g >
<title>operator new (18,153,897 samples, 0.34%)</title><rect x="465.2" y="453" width="4.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="468.25" y="463.5" ></text>
</g>
<g >
<title>_IO_new_file_xsputn (24,357,570 samples, 0.46%)</title><rect x="10.0" y="389" width="5.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.02" y="399.5" ></text>
</g>
<g >
<title>__strcpy_evex (3,120,432 samples, 0.06%)</title><rect x="352.0" y="421" width="0.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="354.95" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="277" width="56.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="963.07" y="287.5" >std::_..</text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (346,250,881 samples, 6.51%)</title><rect x="689.4" y="501" width="76.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="692.44" y="511.5" >std::sha..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (53,983,203 samples, 1.02%)</title><rect x="415.2" y="389" width="12.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="418.20" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_lower_bound (216,529,755 samples, 4.07%)</title><rect x="572.7" y="453" width="48.0" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="575.67" y="463.5" >std:..</text>
</g>
<g >
<title>muduo::net::Buffer::begin (10,678,117 samples, 0.20%)</title><rect x="23.1" y="501" width="2.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="26.09" y="511.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setConnectionCallback (30,105,182 samples, 0.57%)</title><rect x="427.2" y="501" width="6.7" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="430.19" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (26,129,718 samples, 0.49%)</title><rect x="1157.3" y="469" width="5.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1160.29" y="479.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (216,529,755 samples, 4.07%)</title><rect x="572.7" y="421" width="48.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="575.67" y="431.5" >std:..</text>
</g>
<g >
<title>muduo::net::TcpServer::removeConnectionInLoop (462,622,376 samples, 8.70%)</title><rect x="1021.4" y="501" width="102.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1024.36" y="511.5" >muduo::net::..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;muduo::net::TcpConnection*,  (8,612,767 samples, 0.16%)</title><rect x="173.4" y="213" width="1.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="176.39" y="223.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (51,700,575 samples, 0.97%)</title><rect x="163.8" y="229" width="11.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="166.82" y="239.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (10,153,414 samples, 0.19%)</title><rect x="37.4" y="517" width="2.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="40.35" y="527.5" ></text>
</g>
<g >
<title>muduo::detail::startThread (24,449,137 samples, 0.46%)</title><rect x="10.0" y="533" width="5.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (75,075,121 samples, 1.41%)</title><rect x="1107.4" y="437" width="16.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1110.39" y="447.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::removeConnection (54,570,658 samples, 1.03%)</title><rect x="1127.6" y="501" width="12.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1130.57" y="511.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (8,046,472 samples, 0.15%)</title><rect x="570.9" y="405" width="1.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="573.88" y="415.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (9,936,422 samples, 0.19%)</title><rect x="407.3" y="437" width="2.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="410.34" y="447.5" ></text>
</g>
<g >
<title>operator new (8,580,582 samples, 0.16%)</title><rect x="638.4" y="437" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="641.39" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (7,621,264 samples, 0.14%)</title><rect x="1125.9" y="437" width="1.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1128.88" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_drop_node (14,901,420 samples, 0.28%)</title><rect x="1085.2" y="421" width="3.3" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1088.23" y="431.5" ></text>
</g>
<g >
<title>main::{lambda (44,349,160 samples, 0.83%)</title><rect x="208.9" y="485" width="9.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="211.90" y="495.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (75,075,121 samples, 1.41%)</title><rect x="1107.4" y="421" width="16.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1110.39" y="431.5" ></text>
</g>
<g >
<title>outstring_func (25,673,411 samples, 0.48%)</title><rect x="453.7" y="437" width="5.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="456.72" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (33,072,734 samples, 0.62%)</title><rect x="1075.4" y="437" width="7.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1078.44" y="447.5" ></text>
</g>
<g >
<title>__getsockname (27,568,107 samples, 0.52%)</title><rect x="56.9" y="549" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="59.93" y="559.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="405" width="1.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1140.87" y="415.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::updateChannel (10,373,824 samples, 0.20%)</title><rect x="766.3" y="549" width="2.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="769.31" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9,785,381 samples, 0.18%)</title><rect x="1073.3" y="405" width="2.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1076.26" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Socket, std::default_delete&lt;muduo::net::Socket&gt; &gt;::~unique_ptr (53,748,131 samples, 1.01%)</title><rect x="1005.1" y="197" width="11.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1008.11" y="207.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;muduo::net::TcpConnection&gt;::shared_from_this (9,936,422 samples, 0.19%)</title><rect x="407.3" y="485" width="2.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="410.34" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (704,726,677 samples, 13.26%)</title><rect x="801.6" y="437" width="156.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="804.64" y="447.5" >std::_Hashtable&lt;int,..</text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (211,858,804 samples, 3.99%)</title><rect x="112.9" y="501" width="47.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="115.90" y="511.5" >mudu..</text>
</g>
<g >
<title>muduo::CurrentThread::tid (28,037,108 samples, 0.53%)</title><rect x="793.8" y="437" width="6.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="796.81" y="447.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char*, char&gt; (15,988,560 samples, 0.30%)</title><rect x="366.0" y="341" width="3.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="369.04" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (25,191,512 samples, 0.47%)</title><rect x="1077.2" y="357" width="5.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1080.19" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocate (39,051,395 samples, 0.73%)</title><rect x="385.2" y="389" width="8.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="388.17" y="399.5" ></text>
</g>
<g >
<title>operator new (8,494,167 samples, 0.16%)</title><rect x="1130.2" y="437" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1133.15" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (9,936,422 samples, 0.19%)</title><rect x="407.3" y="421" width="2.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="410.34" y="431.5" ></text>
</g>
<g >
<title>[proxy_serve] (8,202,098 samples, 0.15%)</title><rect x="177.0" y="501" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="179.97" y="511.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (19,612,480 samples, 0.37%)</title><rect x="199.4" y="357" width="4.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="202.38" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;void  (14,018,288 samples, 0.26%)</title><rect x="53.8" y="517" width="3.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="56.81" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="405" width="56.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="963.07" y="415.5" >std::_..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (51,700,575 samples, 0.97%)</title><rect x="163.8" y="357" width="11.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="166.82" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (35,837,870 samples, 0.67%)</title><rect x="469.3" y="469" width="7.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="472.28" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (478,459,134 samples, 9.00%)</title><rect x="1021.4" y="533" width="106.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1024.36" y="543.5" >std::function..</text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::~_Vector_base (87,229,459 samples, 1.64%)</title><rect x="960.1" y="165" width="19.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="963.07" y="175.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (16,193,718 samples, 0.30%)</title><rect x="1048.1" y="341" width="3.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1051.08" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;void  (42,957,837 samples, 0.81%)</title><rect x="1130.2" y="485" width="9.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1133.15" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2,078,867,108 samples, 39.11%)</title><rect x="178.8" y="533" width="461.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="181.80" y="543.5" >std::function&lt;void </text>
</g>
<g >
<title>__strchrnul_evex (7,430,603 samples, 0.14%)</title><rect x="226.5" y="421" width="1.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="229.55" y="431.5" ></text>
</g>
<g >
<title>muduo::net::sockets::write (35,608,982 samples, 0.67%)</title><rect x="41.7" y="517" width="7.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="44.69" y="527.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (35,237,969 samples, 0.66%)</title><rect x="210.9" y="453" width="7.8" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="213.92" y="463.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (9,745,520 samples, 0.18%)</title><rect x="33.3" y="437" width="2.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="36.33" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::~_Scoped_node (9,257,604 samples, 0.17%)</title><rect x="1161.0" y="453" width="2.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1164.03" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (8,969,914 samples, 0.17%)</title><rect x="486.2" y="293" width="2.0" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="489.23" y="303.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="389" width="56.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="963.07" y="399.5" >std::_..</text>
</g>
<g >
<title>muduo::MutexLock::unlock (18,548,445 samples, 0.35%)</title><rect x="210.9" y="421" width="4.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="213.92" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, ProxyServer::ProxyServer (53,032,115 samples, 1.00%)</title><rect x="1163.1" y="469" width="11.8" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1166.09" y="479.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (100,840,175 samples, 1.90%)</title><rect x="437.0" y="469" width="22.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="440.04" y="479.5" >_..</text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_deallocate (87,229,459 samples, 1.64%)</title><rect x="960.1" y="149" width="19.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="963.07" y="159.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,934,913 samples, 0.15%)</title><rect x="1086.8" y="309" width="1.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1089.77" y="319.5" ></text>
</g>
<g >
<title>muduo::net::sockets::accept (8,233,420 samples, 0.15%)</title><rect x="177.0" y="517" width="1.8" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="179.97" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (53,983,203 samples, 1.02%)</title><rect x="415.2" y="453" width="12.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="418.20" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::~shared_ptr (26,082,201 samples, 0.49%)</title><rect x="84.5" y="501" width="5.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="87.50" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8,969,914 samples, 0.17%)</title><rect x="486.2" y="229" width="2.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="489.23" y="239.5" ></text>
</g>
<g >
<title>tcache_put (8,619,166 samples, 0.16%)</title><rect x="165.5" y="181" width="1.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="168.52" y="191.5" ></text>
</g>
<g >
<title>_itoa_word (11,137,512 samples, 0.21%)</title><rect x="343.2" y="373" width="2.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="346.21" y="383.5" ></text>
</g>
<g >
<title>start_thread (24,449,137 samples, 0.46%)</title><rect x="10.0" y="549" width="5.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>__strchrnul_evex (29,181,211 samples, 0.55%)</title><rect x="1037.8" y="341" width="6.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1040.79" y="351.5" ></text>
</g>
<g >
<title>muduo::net::Acceptor::handleRead (44,307,049 samples, 0.83%)</title><rect x="647.9" y="517" width="9.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="650.95" y="527.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::avail (11,026,362 samples, 0.21%)</title><rect x="1064.5" y="421" width="2.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1067.47" y="431.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (26,082,201 samples, 0.49%)</title><rect x="84.5" y="469" width="5.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="87.50" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8,494,167 samples, 0.16%)</title><rect x="1130.2" y="469" width="1.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1133.15" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, muduo::net::Channel*, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::operator[] (26,129,718 samples, 0.49%)</title><rect x="1157.3" y="485" width="5.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1160.29" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;muduo::net::Channel*, std::allocator&lt;muduo::net::Channel*&gt; &gt;::push_back (13,894,716 samples, 0.26%)</title><rect x="790.7" y="501" width="3.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="793.73" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (7,602,392 samples, 0.14%)</title><rect x="1159.3" y="453" width="1.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1162.35" y="463.5" ></text>
</g>
<g >
<title>___snprintf_chk (107,931,066 samples, 2.03%)</title><rect x="435.5" y="485" width="23.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="438.46" y="495.5" >_..</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::vector (68,498,045 samples, 1.29%)</title><rect x="354.4" y="469" width="15.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="357.38" y="479.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::writableBytes (8,254,928 samples, 0.16%)</title><rect x="646.1" y="533" width="1.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="649.11" y="543.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setCloseCallback (53,983,203 samples, 1.02%)</title><rect x="415.2" y="501" width="12.0" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="418.20" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (51,700,575 samples, 0.97%)</title><rect x="163.8" y="373" width="11.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="166.82" y="383.5" ></text>
</g>
<g >
<title>muduo::net::sockets::accept (50,452,879 samples, 0.95%)</title><rect x="1174.9" y="549" width="11.2" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1177.86" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (51,700,575 samples, 0.97%)</title><rect x="163.8" y="245" width="11.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="166.82" y="255.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (15,317,520 samples, 0.29%)</title><rect x="12.0" y="373" width="3.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="15.03" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (39,051,395 samples, 0.73%)</title><rect x="385.2" y="421" width="8.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="388.17" y="431.5" ></text>
</g>
<g >
<title>_int_malloc (25,191,512 samples, 0.47%)</title><rect x="1077.2" y="341" width="5.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1080.19" y="351.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (8,043,367 samples, 0.15%)</title><rect x="218.7" y="437" width="1.8" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="221.74" y="447.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::doPendingFunctors (289,596,004 samples, 5.45%)</title><rect x="111.0" y="517" width="64.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="114.01" y="527.5" >muduo::..</text>
</g>
<g >
<title>[proxy_serve] (8,782,569 samples, 0.17%)</title><rect x="215.0" y="405" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="218.04" y="415.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,410,932 samples, 0.16%)</title><rect x="1147.1" y="485" width="1.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1150.07" y="495.5" ></text>
</g>
<g >
<title>muduo::net::sockets::shutdownWrite (18,986,246 samples, 0.36%)</title><rect x="49.6" y="517" width="4.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="52.60" y="527.5" ></text>
</g>
<g >
<title>std::bind&lt;void  (11,612,821 samples, 0.22%)</title><rect x="1127.6" y="485" width="2.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1130.57" y="495.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::TcpConnection (222,149,407 samples, 4.18%)</title><rect x="352.6" y="501" width="49.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="355.64" y="511.5" >mudu..</text>
</g>
<g >
<title>malloc_consolidate (8,385,882 samples, 0.16%)</title><rect x="66.9" y="485" width="1.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="69.89" y="495.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (14,018,288 samples, 0.26%)</title><rect x="53.8" y="501" width="3.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="56.81" y="511.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (145,018,632 samples, 2.73%)</title><rect x="1025.7" y="485" width="32.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1028.71" y="495.5" >mu..</text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Socket&gt;::operator (19,902,686 samples, 0.37%)</title><rect x="1150.6" y="501" width="4.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1153.64" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (8,410,932 samples, 0.16%)</title><rect x="1147.1" y="517" width="1.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1150.07" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;&gt; (8,810,983 samples, 0.17%)</title><rect x="1145.1" y="485" width="2.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1148.12" y="495.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::avail (11,094,790 samples, 0.21%)</title><rect x="180.4" y="469" width="2.5" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="183.40" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (35,837,870 samples, 0.67%)</title><rect x="469.3" y="485" width="7.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="472.28" y="495.5" ></text>
</g>
<g >
<title>__GI_inet_ntop (551,668,306 samples, 10.38%)</title><rect x="230.2" y="453" width="122.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="233.18" y="463.5" >__GI_inet_ntop</text>
</g>
<g >
<title>muduo::MutexLock::lock (10,100,542 samples, 0.19%)</title><rect x="1060.4" y="405" width="2.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1063.44" y="415.5" ></text>
</g>
<g >
<title>operator new (8,526,323 samples, 0.16%)</title><rect x="459.4" y="501" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="462.42" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (39,051,395 samples, 0.73%)</title><rect x="385.2" y="437" width="8.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="388.17" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (40,173,690 samples, 0.76%)</title><rect x="479.3" y="373" width="8.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="482.30" y="383.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (102,249,042 samples, 1.92%)</title><rect x="184.7" y="485" width="22.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="187.70" y="495.5" >m..</text>
</g>
<g >
<title>muduo::MutexLock::unlock (9,034,821 samples, 0.17%)</title><rect x="159.9" y="485" width="2.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="162.93" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr&lt;muduo::net::TcpConnection, void&gt; (9,936,422 samples, 0.19%)</title><rect x="407.3" y="469" width="2.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="410.34" y="479.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEvent (16,347,355 samples, 0.31%)</title><rect x="768.6" y="533" width="3.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="771.61" y="543.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (211,858,804 samples, 3.99%)</title><rect x="112.9" y="469" width="47.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="115.90" y="479.5" >___p..</text>
</g>
<g >
<title>muduo::Logger::Impl::finish (7,826,630 samples, 0.15%)</title><rect x="1066.9" y="405" width="1.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1069.92" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (34,463,670 samples, 0.65%)</title><rect x="1132.0" y="469" width="7.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1135.04" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (17,118,930 samples, 0.32%)</title><rect x="1135.9" y="437" width="3.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1138.89" y="447.5" ></text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (8,043,367 samples, 0.15%)</title><rect x="218.7" y="469" width="1.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="221.74" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (15,988,560 samples, 0.30%)</title><rect x="366.0" y="405" width="3.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="369.04" y="415.5" ></text>
</g>
<g >
<title>__GI_shutdown (14,018,288 samples, 0.26%)</title><rect x="53.8" y="469" width="3.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="56.81" y="479.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::~TcpConnection (256,623,753 samples, 4.83%)</title><rect x="960.1" y="213" width="56.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="963.07" y="223.5" >muduo:..</text>
</g>
<g >
<title>__vsnprintf_internal (7,430,603 samples, 0.14%)</title><rect x="226.5" y="469" width="1.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="229.55" y="479.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (18,548,445 samples, 0.35%)</title><rect x="210.9" y="405" width="4.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="213.92" y="415.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="357" width="56.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="963.07" y="367.5" >std::_..</text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (9,076,068 samples, 0.17%)</title><rect x="409.5" y="469" width="2.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="412.54" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (48,143,221 samples, 0.91%)</title><rect x="988.6" y="69" width="10.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="991.58" y="79.5" ></text>
</g>
<g >
<title>operator new (53,983,203 samples, 1.02%)</title><rect x="415.2" y="373" width="12.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="418.20" y="383.5" ></text>
</g>
<g >
<title>___snprintf_chk (70,250,787 samples, 1.32%)</title><rect x="188.1" y="421" width="15.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="191.14" y="431.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (256,623,753 samples, 4.83%)</title><rect x="960.1" y="293" width="56.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="963.07" y="303.5" >std::s..</text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::append (16,689,524 samples, 0.31%)</title><rect x="215.0" y="437" width="3.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="218.04" y="447.5" ></text>
</g>
<g >
<title>done_add_func (7,880,696 samples, 0.15%)</title><rect x="457.7" y="421" width="1.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="460.67" y="431.5" ></text>
</g>
<g >
<title>__find_specmb (29,181,211 samples, 0.55%)</title><rect x="1037.8" y="357" width="6.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1040.79" y="367.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;void,  (26,327,538 samples, 0.50%)</title><rect x="999.3" y="117" width="5.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1002.27" y="127.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (40,173,690 samples, 0.76%)</title><rect x="479.3" y="405" width="8.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="482.30" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_free (8,297,900 samples, 0.16%)</title><rect x="1009.1" y="149" width="1.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1012.05" y="159.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (7,826,630 samples, 0.15%)</title><rect x="1066.9" y="389" width="1.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1069.92" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (33,072,734 samples, 0.62%)</title><rect x="1075.4" y="421" width="7.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1078.44" y="431.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (8,082,536 samples, 0.15%)</title><rect x="205.6" y="437" width="1.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="208.60" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (51,115,926 samples, 0.96%)</title><rect x="97.7" y="421" width="11.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="100.75" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;void  (10,756,420 samples, 0.20%)</title><rect x="375.6" y="469" width="2.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="378.63" y="479.5" ></text>
</g>
<g >
<title>__GI_fwrite_unlocked (24,357,570 samples, 0.46%)</title><rect x="10.0" y="421" width="5.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="13.02" y="431.5" ></text>
</g>
<g >
<title>[unknown] (27,568,107 samples, 0.52%)</title><rect x="56.9" y="533" width="6.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="59.93" y="543.5" ></text>
</g>
<g >
<title>ProxyServer::onMessage (7,642,084 samples, 0.14%)</title><rect x="1148.9" y="453" width="1.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1151.94" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~_Tuple_impl (51,700,575 samples, 0.97%)</title><rect x="163.8" y="309" width="11.5" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="166.82" y="319.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (51,700,575 samples, 0.97%)</title><rect x="163.8" y="261" width="11.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="166.82" y="271.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::update (24,221,705 samples, 0.46%)</title><rect x="402.0" y="469" width="5.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="404.96" y="479.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (8,396,175 samples, 0.16%)</title><rect x="203.7" y="453" width="1.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="206.74" y="463.5" ></text>
</g>
<g >
<title>epoll_wait (32,176,486 samples, 0.61%)</title><rect x="776.1" y="517" width="7.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="779.14" y="527.5" ></text>
</g>
<g >
<title>[proxy_serve] (7,881,222 samples, 0.15%)</title><rect x="1075.4" y="373" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1078.44" y="383.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;ProxyServer::ProxyServer (9,759,513 samples, 0.18%)</title><rect x="431.7" y="421" width="2.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="434.70" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (364,001,726 samples, 6.85%)</title><rect x="490.1" y="453" width="80.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="493.07" y="463.5" >std::_Rb_..</text>
</g>
<g >
<title>std::__invoke_r&lt;void, ProxyServer::ProxyServer (15,836,758 samples, 0.30%)</title><rect x="1124.1" y="501" width="3.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1127.06" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (48,143,221 samples, 0.91%)</title><rect x="988.6" y="85" width="10.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="991.58" y="95.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::connectEstablished (59,643,068 samples, 1.12%)</title><rect x="402.0" y="501" width="13.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="404.96" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;ProxyServer::ProxyServer (20,840,142 samples, 0.39%)</title><rect x="429.2" y="437" width="4.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="432.24" y="447.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::setMessageCallback (7,179,160 samples, 0.14%)</title><rect x="433.9" y="501" width="1.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="436.87" y="511.5" ></text>
</g>
<g >
<title>muduo::net::Channel::setWriteCallback (10,756,420 samples, 0.20%)</title><rect x="375.6" y="485" width="2.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="378.63" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_free (8,776,818 samples, 0.17%)</title><rect x="33.5" y="421" width="2.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="36.54" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (8,410,932 samples, 0.16%)</title><rect x="1147.1" y="501" width="1.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1150.07" y="511.5" ></text>
</g>
<g >
<title>ProxyServer::ProxyServer (53,032,115 samples, 1.00%)</title><rect x="1163.1" y="453" width="11.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1166.09" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8,094,667 samples, 0.15%)</title><rect x="392.0" y="341" width="1.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="395.04" y="351.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::_Tuple_impl (11,612,821 samples, 0.22%)</title><rect x="1127.6" y="421" width="2.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1130.57" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::erase (174,912,641 samples, 3.29%)</title><rect x="1085.2" y="469" width="38.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1088.23" y="479.5" >std..</text>
</g>
<g >
<title>std::function&lt;void  (53,032,115 samples, 1.00%)</title><rect x="1163.1" y="517" width="11.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1166.09" y="527.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (18,162,211 samples, 0.34%)</title><rect x="220.5" y="453" width="4.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="223.53" y="463.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::newConnection (18,222,203 samples, 0.34%)</title><rect x="653.7" y="485" width="4.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="656.74" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;void  (44,148,975 samples, 0.83%)</title><rect x="679.6" y="501" width="9.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="682.64" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Channel, std::default_delete&lt;muduo::net::Channel&gt; &gt;::~unique_ptr (107,433,340 samples, 2.02%)</title><rect x="981.3" y="197" width="23.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="984.26" y="207.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (40,173,690 samples, 0.76%)</title><rect x="479.3" y="357" width="8.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="482.30" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr&lt;muduo::net::TcpConnection, void&gt; (21,746,804 samples, 0.41%)</title><rect x="674.8" y="485" width="4.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="677.81" y="495.5" ></text>
</g>
<g >
<title>__memset_evex_unaligned_erms (15,988,560 samples, 0.30%)</title><rect x="366.0" y="309" width="3.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="369.04" y="319.5" ></text>
</g>
<g >
<title>[unknown] (23,259,303 samples, 0.44%)</title><rect x="776.2" y="501" width="5.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="779.16" y="511.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (15,988,560 samples, 0.30%)</title><rect x="366.0" y="373" width="3.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="369.04" y="383.5" ></text>
</g>
<g >
<title>operator new (32,211,045 samples, 0.61%)</title><rect x="378.0" y="485" width="7.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="381.02" y="495.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::poll (8,626,244 samples, 0.16%)</title><rect x="109.1" y="517" width="1.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="112.09" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~_Tuple_impl (256,623,753 samples, 4.83%)</title><rect x="960.1" y="325" width="56.9" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="963.07" y="335.5" >std::_..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (36,601,055 samples, 0.69%)</title><rect x="393.8" y="453" width="8.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="396.84" y="463.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleRead (488,853,963 samples, 9.20%)</title><rect x="657.8" y="517" width="108.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="660.78" y="527.5" >muduo::net::T..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (54,371,258 samples, 1.02%)</title><rect x="626.3" y="437" width="12.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="629.32" y="447.5" ></text>
</g>
<g >
<title>__vfprintf_internal (7,430,603 samples, 0.14%)</title><rect x="226.5" y="453" width="1.7" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="229.55" y="463.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::peek (10,678,117 samples, 0.20%)</title><rect x="23.1" y="517" width="2.4" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="26.09" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, ProxyServer::ProxyServer (15,836,758 samples, 0.30%)</title><rect x="1124.1" y="485" width="3.5" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1127.06" y="495.5" ></text>
</g>
<g >
<title>Logging (24,449,137 samples, 0.46%)</title><rect x="10.0" y="581" width="5.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>operator delete (14,726,198 samples, 0.28%)</title><rect x="996.0" y="53" width="3.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="999.00" y="63.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::~_Head_base (256,623,753 samples, 4.83%)</title><rect x="960.1" y="309" width="56.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="963.07" y="319.5" >std::_..</text>
</g>
<g >
<title>std::function&lt;void  (53,983,203 samples, 1.02%)</title><rect x="415.2" y="485" width="12.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="418.20" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8,580,582 samples, 0.16%)</title><rect x="638.4" y="421" width="1.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="641.39" y="431.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::~shared_ptr (16,408,873 samples, 0.31%)</title><rect x="411.6" y="485" width="3.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="414.56" y="495.5" ></text>
</g>
<g >
<title>__find_specmb (8,234,020 samples, 0.15%)</title><rect x="341.4" y="373" width="1.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="344.38" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (60,189,580 samples, 1.13%)</title><rect x="161.9" y="501" width="13.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="164.94" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (53,983,203 samples, 1.02%)</title><rect x="415.2" y="357" width="12.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="418.20" y="367.5" ></text>
</g>
<g >
<title>muduo::Logger::Logger (110,510,431 samples, 2.08%)</title><rect x="182.9" y="501" width="24.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="185.86" y="511.5" >m..</text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (108,354,323 samples, 2.04%)</title><rect x="1027.6" y="437" width="24.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1030.62" y="447.5" >m..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (8,410,932 samples, 0.16%)</title><rect x="1147.1" y="453" width="1.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1150.07" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_r&lt;void, ProxyServer::ProxyServer (53,032,115 samples, 1.00%)</title><rect x="1163.1" y="485" width="11.8" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1166.09" y="495.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~tuple (51,700,575 samples, 0.97%)</title><rect x="163.8" y="325" width="11.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="166.82" y="335.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;void&gt;::lock (84,707,132 samples, 1.59%)</title><rect x="90.3" y="501" width="18.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="93.29" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (7,621,264 samples, 0.14%)</title><rect x="1125.9" y="405" width="1.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1128.88" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;void  (30,105,182 samples, 0.57%)</title><rect x="427.2" y="485" width="6.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="430.19" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::allocate (8,330,185 samples, 0.16%)</title><rect x="488.2" y="421" width="1.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="491.22" y="431.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (9,656,452 samples, 0.18%)</title><rect x="455.5" y="405" width="2.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="458.53" y="415.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr (11,612,821 samples, 0.22%)</title><rect x="1127.6" y="389" width="2.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1130.57" y="399.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (77,085,281 samples, 1.45%)</title><rect x="92.0" y="453" width="17.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="94.98" y="463.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (9,375,949 samples, 0.18%)</title><rect x="1049.6" y="325" width="2.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1052.59" y="335.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (51,700,575 samples, 0.97%)</title><rect x="163.8" y="277" width="11.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="166.82" y="287.5" ></text>
</g>
<g >
<title>ProxyServer::ProxyServer (7,159,747 samples, 0.13%)</title><rect x="1188.4" y="549" width="1.6" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1191.41" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; (14,901,420 samples, 0.28%)</title><rect x="1085.2" y="373" width="3.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1088.23" y="383.5" ></text>
</g>
<g >
<title>muduo::net::sockets::toIp (551,668,306 samples, 10.38%)</title><rect x="230.2" y="469" width="122.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="233.18" y="479.5" >muduo::net::soc..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,173,690 samples, 0.76%)</title><rect x="479.3" y="437" width="8.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="482.30" y="447.5" ></text>
</g>
<g >
<title>_int_malloc (8,038,870 samples, 0.15%)</title><rect x="380.1" y="453" width="1.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="383.14" y="463.5" ></text>
</g>
<g >
<title>outstring_func (28,233,295 samples, 0.53%)</title><rect x="345.7" y="373" width="6.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="348.68" y="383.5" ></text>
</g>
<g >
<title>ProxyServer::onProxyClientConnection (15,836,758 samples, 0.30%)</title><rect x="1124.1" y="453" width="3.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1127.06" y="463.5" ></text>
</g>
<g >
<title>muduo::net::Socket::accept (8,233,420 samples, 0.15%)</title><rect x="177.0" y="533" width="1.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="179.97" y="543.5" ></text>
</g>
<g >
<title>_int_malloc (43,408,130 samples, 0.82%)</title><rect x="354.4" y="341" width="9.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="357.38" y="351.5" ></text>
</g>
<g >
<title>muduo::FileUtil::AppendFile::write (24,357,570 samples, 0.46%)</title><rect x="10.0" y="437" width="5.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="13.02" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_create_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (48,503,875 samples, 0.91%)</title><rect x="479.3" y="469" width="10.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="482.30" y="479.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (19,620,280 samples, 0.37%)</title><rect x="1021.4" y="469" width="4.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1024.36" y="479.5" ></text>
</g>
<g >
<title>std::forward&lt;ProxyServer::ProxyServer (9,759,513 samples, 0.18%)</title><rect x="431.7" y="405" width="2.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="434.70" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;void  (71,707,895 samples, 1.35%)</title><rect x="461.3" y="501" width="15.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="464.32" y="511.5" ></text>
</g>
<g >
<title>_int_malloc (37,340,978 samples, 0.70%)</title><rect x="418.9" y="341" width="8.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="421.90" y="351.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (20,766,437 samples, 0.39%)</title><rect x="1068.7" y="437" width="4.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1071.65" y="447.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocate (8,969,914 samples, 0.17%)</title><rect x="486.2" y="277" width="2.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="489.23" y="287.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (8,082,536 samples, 0.15%)</title><rect x="205.6" y="405" width="1.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="208.60" y="415.5" ></text>
</g>
<g >
<title>ProxyServer::onProxyClientConnection (53,032,115 samples, 1.00%)</title><rect x="1163.1" y="437" width="11.8" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1166.09" y="447.5" ></text>
</g>
<g >
<title>ProxyServer::ProxyServer (15,836,758 samples, 0.30%)</title><rect x="1124.1" y="469" width="3.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1127.06" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; (14,901,420 samples, 0.28%)</title><rect x="1085.2" y="389" width="3.3" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1088.23" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (8,212,823 samples, 0.15%)</title><rect x="979.4" y="149" width="1.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="982.44" y="159.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::updateChannel (19,428,248 samples, 0.37%)</title><rect x="1017.0" y="517" width="4.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1020.04" y="527.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::Buffer (68,498,045 samples, 1.29%)</title><rect x="354.4" y="485" width="15.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="357.38" y="495.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (51,700,575 samples, 0.97%)</title><rect x="163.8" y="341" width="11.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="166.82" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (30,105,182 samples, 0.57%)</title><rect x="427.2" y="453" width="6.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="430.19" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;muduo::net::TcpConnection,  (7,621,264 samples, 0.14%)</title><rect x="1125.9" y="421" width="1.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1128.88" y="431.5" ></text>
</g>
<g >
<title>__GI___close (11,649,854 samples, 0.22%)</title><rect x="1152.5" y="453" width="2.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1155.47" y="463.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (24,452,598 samples, 0.46%)</title><rect x="1139.7" y="421" width="5.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1142.69" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8,962,181 samples, 0.17%)</title><rect x="958.1" y="437" width="2.0" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="961.08" y="447.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (18,548,445 samples, 0.35%)</title><rect x="210.9" y="437" width="4.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="213.92" y="447.5" ></text>
</g>
<g >
<title>[unknown] (14,018,288 samples, 0.26%)</title><rect x="53.8" y="453" width="3.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="56.81" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_free (8,385,882 samples, 0.16%)</title><rect x="66.9" y="517" width="1.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="69.89" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="325" width="1.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1140.87" y="335.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (9,034,821 samples, 0.17%)</title><rect x="159.9" y="501" width="2.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="162.93" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;void  (7,179,160 samples, 0.14%)</title><rect x="433.9" y="485" width="1.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="436.87" y="495.5" ></text>
</g>
<g >
<title>[proxy_serve] (968,702 samples, 0.02%)</title><rect x="33.3" y="421" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="36.33" y="431.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::newConnection (107,931,066 samples, 2.03%)</title><rect x="435.5" y="501" width="23.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="438.46" y="511.5" >m..</text>
</g>
<g >
<title>__GI___libc_free (35,837,870 samples, 0.67%)</title><rect x="469.3" y="421" width="7.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="472.28" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;void  (8,533,013 samples, 0.16%)</title><rect x="770.3" y="501" width="1.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="773.34" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (44,148,975 samples, 0.83%)</title><rect x="679.6" y="485" width="9.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="682.64" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (26,082,201 samples, 0.49%)</title><rect x="84.5" y="453" width="5.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="87.50" y="463.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (18,162,211 samples, 0.34%)</title><rect x="220.5" y="405" width="4.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="223.53" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_Vector_base (52,509,485 samples, 0.99%)</title><rect x="354.4" y="453" width="11.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="357.38" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (6,966,507 samples, 0.13%)</title><rect x="1085.2" y="277" width="1.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1088.23" y="287.5" ></text>
</g>
<g >
<title>std::function&lt;void  (533,161,012 samples, 10.03%)</title><rect x="647.9" y="533" width="118.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="650.95" y="543.5" >std::function&lt;..</text>
</g>
<g >
<title>tcache_get (8,580,582 samples, 0.16%)</title><rect x="638.4" y="405" width="1.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="641.39" y="415.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::FixedBuffer (8,444,035 samples, 0.16%)</title><rect x="186.3" y="453" width="1.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="189.27" y="463.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (23,000,880 samples, 0.43%)</title><rect x="783.3" y="501" width="5.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="786.28" y="511.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (24,452,598 samples, 0.46%)</title><rect x="1139.7" y="437" width="5.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1142.69" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_free (690,468,936 samples, 12.99%)</title><rect x="804.8" y="357" width="153.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="807.80" y="367.5" >__GI___libc_free</text>
</g>
<g >
<title>std::__weak_count&lt; (26,327,538 samples, 0.50%)</title><rect x="999.3" y="101" width="5.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1002.27" y="111.5" ></text>
</g>
<g >
<title>muduo::net::Channel::enableReading (24,221,705 samples, 0.46%)</title><rect x="402.0" y="485" width="5.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="404.96" y="495.5" ></text>
</g>
<g >
<title>__vdso_gettimeofday (28,071,068 samples, 0.53%)</title><rect x="1051.7" y="437" width="6.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1054.67" y="447.5" ></text>
</g>
<g >
<title>[proxy_serve] (11,273,865 samples, 0.21%)</title><rect x="1111.7" y="373" width="2.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1114.71" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (39,051,395 samples, 0.73%)</title><rect x="385.2" y="469" width="8.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="388.17" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (18,587,647 samples, 0.35%)</title><rect x="371.5" y="469" width="4.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="374.50" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (8,212,823 samples, 0.15%)</title><rect x="979.4" y="197" width="1.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="982.44" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (33,072,734 samples, 0.62%)</title><rect x="1075.4" y="389" width="7.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1078.44" y="399.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (70,250,787 samples, 1.32%)</title><rect x="188.1" y="469" width="15.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="191.14" y="479.5" ></text>
</g>
<g >
<title>__vfprintf_internal (85,700,422 samples, 1.61%)</title><rect x="440.4" y="453" width="19.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="443.40" y="463.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (11,612,821 samples, 0.22%)</title><rect x="1127.6" y="469" width="2.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1130.57" y="479.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;char&gt; (15,988,560 samples, 0.30%)</title><rect x="366.0" y="325" width="3.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="369.04" y="335.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (8,533,013 samples, 0.16%)</title><rect x="770.3" y="405" width="1.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="773.34" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_free (33,417,023 samples, 0.63%)</title><rect x="988.6" y="53" width="7.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="991.58" y="63.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (12,011,962 samples, 0.23%)</title><rect x="677.0" y="437" width="2.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="679.97" y="447.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::poll (97,183,722 samples, 1.83%)</title><rect x="772.2" y="533" width="21.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="775.24" y="543.5" >m..</text>
</g>
<g >
<title>tcache_get (14,589,353 samples, 0.27%)</title><rect x="381.9" y="453" width="3.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="384.93" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size (9,294,490 samples, 0.17%)</title><rect x="484.2" y="293" width="2.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="487.17" y="303.5" ></text>
</g>
<g >
<title>_int_malloc (9,949,777 samples, 0.19%)</title><rect x="399.8" y="405" width="2.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="402.75" y="415.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::sendInLoop (45,026,580 samples, 0.85%)</title><rect x="39.6" y="533" width="10.0" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="42.60" y="543.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (70,250,787 samples, 1.32%)</title><rect x="188.1" y="437" width="15.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="191.14" y="447.5" ></text>
</g>
<g >
<title>muduo::LogStream::LogStream (8,444,035 samples, 0.16%)</title><rect x="186.3" y="469" width="1.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="189.27" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (26,082,201 samples, 0.49%)</title><rect x="84.5" y="437" width="5.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="87.50" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (8,533,013 samples, 0.16%)</title><rect x="770.3" y="389" width="1.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="773.34" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt; &gt;::allocate (8,330,185 samples, 0.16%)</title><rect x="488.2" y="437" width="1.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="491.22" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (9,269,722 samples, 0.17%)</title><rect x="1157.3" y="453" width="2.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1160.29" y="463.5" ></text>
</g>
<g >
<title>muduo::CheckNotNull&lt;muduo::net::EventLoop&gt; (7,809,423 samples, 0.15%)</title><rect x="352.6" y="485" width="1.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="355.64" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (8,046,472 samples, 0.15%)</title><rect x="570.9" y="421" width="1.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="573.88" y="431.5" ></text>
</g>
<g >
<title>___snprintf_chk (16,377,406 samples, 0.31%)</title><rect x="224.6" y="485" width="3.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="227.56" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (79,546,655 samples, 1.50%)</title><rect x="620.7" y="469" width="17.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="623.73" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7,179,160 samples, 0.14%)</title><rect x="433.9" y="453" width="1.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="436.87" y="463.5" ></text>
</g>
<g >
<title>[proxy_serve] (14,257,741 samples, 0.27%)</title><rect x="801.6" y="357" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="804.64" y="367.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::update (10,062,841 samples, 0.19%)</title><rect x="1155.1" y="501" width="2.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1158.05" y="511.5" ></text>
</g>
<g >
<title>__GI___readv (8,306,134 samples, 0.16%)</title><rect x="644.3" y="533" width="1.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="647.27" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_create_storage (52,509,485 samples, 0.99%)</title><rect x="354.4" y="437" width="11.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="357.38" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (8,479,793 samples, 0.16%)</title><rect x="636.5" y="357" width="1.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="639.51" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;void  (748,934,446 samples, 14.09%)</title><rect x="793.8" y="517" width="166.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="796.81" y="527.5" >std::function&lt;void </text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::erase (174,912,641 samples, 3.29%)</title><rect x="1085.2" y="485" width="38.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1088.23" y="495.5" >std..</text>
</g>
<g >
<title>std::weak_ptr&lt;void&gt;::~weak_ptr (26,327,538 samples, 0.50%)</title><rect x="999.3" y="133" width="5.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1002.27" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7,208,480 samples, 0.14%)</title><rect x="800.0" y="421" width="1.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="803.04" y="431.5" ></text>
</g>
<g >
<title>_int_free (25,343,154 samples, 0.48%)</title><rect x="990.4" y="37" width="5.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="993.37" y="47.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, muduo::net::Channel*&gt;, false&gt; &gt; &gt;::deallocate (704,726,677 samples, 13.26%)</title><rect x="801.6" y="389" width="156.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="804.64" y="399.5" >std::allocator_trait..</text>
</g>
<g >
<title>std::enable_shared_from_this&lt;muduo::net::TcpConnection&gt;::shared_from_this (21,746,804 samples, 0.41%)</title><rect x="674.8" y="501" width="4.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="677.81" y="511.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocate (30,574,413 samples, 0.58%)</title><rect x="631.6" y="405" width="6.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="634.61" y="415.5" ></text>
</g>
<g >
<title>ProxyServer::onMessage (8,755,050 samples, 0.16%)</title><rect x="15.4" y="565" width="2.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="18.43" y="575.5" ></text>
</g>
<g >
<title>muduo::net::sockets::close (19,902,686 samples, 0.37%)</title><rect x="1150.6" y="469" width="4.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1153.64" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::allocate (52,509,485 samples, 0.99%)</title><rect x="354.4" y="389" width="11.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="357.38" y="399.5" ></text>
</g>
<g >
<title>muduo::detail::AtomicIntegerT&lt;int&gt;::increment (18,039,413 samples, 0.34%)</title><rect x="1170.9" y="405" width="4.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1173.86" y="415.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (8,396,175 samples, 0.16%)</title><rect x="203.7" y="469" width="1.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="206.74" y="479.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (8,045,676 samples, 0.15%)</title><rect x="1062.7" y="389" width="1.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1065.68" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8,526,323 samples, 0.16%)</title><rect x="459.4" y="485" width="1.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="462.42" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="517" width="56.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="963.07" y="527.5" >std::v..</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::~vector (87,229,459 samples, 1.64%)</title><rect x="960.1" y="181" width="19.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="963.07" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (429,871,967 samples, 8.09%)</title><rect x="477.2" y="485" width="95.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="480.24" y="495.5" >std::_Rb_tr..</text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (26,082,201 samples, 0.49%)</title><rect x="84.5" y="485" width="5.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="87.50" y="495.5" ></text>
</g>
<g >
<title>_int_free (8,619,166 samples, 0.16%)</title><rect x="165.5" y="197" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="168.52" y="207.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (9,040,050 samples, 0.17%)</title><rect x="10.0" y="373" width="2.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="13.02" y="383.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleRead (103,887,255 samples, 1.95%)</title><rect x="1127.6" y="549" width="23.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1130.57" y="559.5" >m..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_destroy_node (14,901,420 samples, 0.28%)</title><rect x="1085.2" y="405" width="3.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1088.23" y="415.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (51,700,575 samples, 0.97%)</title><rect x="163.8" y="437" width="11.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="166.82" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (15,836,758 samples, 0.30%)</title><rect x="1124.1" y="517" width="3.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1127.06" y="527.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (35,837,870 samples, 0.67%)</title><rect x="469.3" y="453" width="7.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="472.28" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="453" width="56.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.07" y="463.5" >std::_..</text>
</g>
<g >
<title>muduo::detail::ThreadData::runInThread (24,449,137 samples, 0.46%)</title><rect x="10.0" y="517" width="5.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::~Buffer (87,229,459 samples, 1.64%)</title><rect x="960.1" y="197" width="19.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="963.07" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (15,988,560 samples, 0.30%)</title><rect x="366.0" y="421" width="3.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="369.04" y="431.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (9,040,050 samples, 0.17%)</title><rect x="10.0" y="341" width="2.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="13.02" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (36,601,055 samples, 0.69%)</title><rect x="393.8" y="421" width="8.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="396.84" y="431.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (8,046,472 samples, 0.15%)</title><rect x="570.9" y="437" width="1.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="573.88" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (42,858,115 samples, 0.81%)</title><rect x="1073.3" y="453" width="9.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1076.26" y="463.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (28,233,295 samples, 0.53%)</title><rect x="345.7" y="357" width="6.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="348.68" y="367.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (8,397,806 samples, 0.16%)</title><rect x="213.2" y="389" width="1.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="216.17" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, muduo::net::Channel*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (704,726,677 samples, 13.26%)</title><rect x="801.6" y="421" width="156.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="804.64" y="431.5" >std::__detail::_Hash..</text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::~_Head_base (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="341" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1140.87" y="351.5" ></text>
</g>
<g >
<title>muduo::LogStream::formatInteger&lt;int&gt; (8,043,367 samples, 0.15%)</title><rect x="218.7" y="453" width="1.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="221.74" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9,269,722 samples, 0.17%)</title><rect x="1157.3" y="437" width="2.0" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1160.29" y="447.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (70,250,787 samples, 1.32%)</title><rect x="188.1" y="453" width="15.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="191.14" y="463.5" ></text>
</g>
<g >
<title>__vfprintf_internal (525,470,795 samples, 9.89%)</title><rect x="235.3" y="389" width="116.7" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="238.30" y="399.5" >__vfprintf_int..</text>
</g>
<g >
<title>tcache_get (8,100,054 samples, 0.15%)</title><rect x="467.5" y="421" width="1.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="470.48" y="431.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (18,162,211 samples, 0.34%)</title><rect x="220.5" y="437" width="4.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="223.53" y="447.5" ></text>
</g>
<g >
<title>ProxyServer::ProxyServer (7,642,084 samples, 0.14%)</title><rect x="1148.9" y="469" width="1.7" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1151.94" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="501" width="56.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.07" y="511.5" >std::_..</text>
</g>
<g >
<title>_IO_no_init (7,001,442 samples, 0.13%)</title><rect x="191.8" y="389" width="1.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="194.79" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;muduo::net::TcpServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::tuple&lt;muduo::net::TcpServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; const&amp;, true&gt; (11,612,821 samples, 0.22%)</title><rect x="1127.6" y="453" width="2.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1130.57" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (75,075,121 samples, 1.41%)</title><rect x="1107.4" y="405" width="16.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1110.39" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, ProxyServer::ProxyServer (7,642,084 samples, 0.14%)</title><rect x="1148.9" y="485" width="1.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1151.94" y="495.5" ></text>
</g>
<g >
<title>operator new (52,509,485 samples, 0.99%)</title><rect x="354.4" y="373" width="11.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="357.38" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="277" width="1.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1140.87" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (8,533,013 samples, 0.16%)</title><rect x="770.3" y="485" width="1.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="773.34" y="495.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (79,546,655 samples, 1.50%)</title><rect x="620.7" y="501" width="17.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="623.73" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (7,208,480 samples, 0.14%)</title><rect x="800.0" y="405" width="1.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="803.04" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (7,934,913 samples, 0.15%)</title><rect x="1086.8" y="277" width="1.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1089.77" y="287.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::assertInLoopThread (28,037,108 samples, 0.53%)</title><rect x="793.8" y="469" width="6.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="796.81" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (11,034,612 samples, 0.21%)</title><rect x="1082.8" y="485" width="2.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1085.78" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (52,509,485 samples, 0.99%)</title><rect x="354.4" y="405" width="11.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="357.38" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_get_node (8,330,185 samples, 0.16%)</title><rect x="488.2" y="453" width="1.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="491.22" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (18,153,897 samples, 0.34%)</title><rect x="465.2" y="437" width="4.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="468.25" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_erase_aux (59,364,784 samples, 1.12%)</title><rect x="1085.2" y="437" width="13.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1088.23" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::allocate (39,051,395 samples, 0.73%)</title><rect x="385.2" y="373" width="8.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="388.17" y="383.5" ></text>
</g>
<g >
<title>muduo::net::sockets::toIpPort (560,594,281 samples, 10.55%)</title><rect x="228.2" y="485" width="124.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="231.19" y="495.5" >muduo::net::soc..</text>
</g>
<g >
<title>muduo::net::Socket::~Socket (19,902,686 samples, 0.37%)</title><rect x="1150.6" y="485" width="4.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1153.64" y="495.5" ></text>
</g>
<g >
<title>main (513,168,927 samples, 9.65%)</title><rect x="63.0" y="549" width="114.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="66.05" y="559.5" >main</text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::~shared_ptr (9,076,068 samples, 0.17%)</title><rect x="409.5" y="485" width="2.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="412.54" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::~_Head_base (51,700,575 samples, 0.97%)</title><rect x="163.8" y="293" width="11.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="166.82" y="303.5" ></text>
</g>
<g >
<title>muduo::net::InetAddress::toIpPort[abi:cxx11] (576,971,687 samples, 10.85%)</title><rect x="224.6" y="501" width="128.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="227.56" y="511.5" >muduo::net::Inet..</text>
</g>
<g >
<title>__vfprintf_internal (46,797,943 samples, 0.88%)</title><rect x="193.3" y="389" width="10.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="196.35" y="399.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (44,363,502 samples, 0.83%)</title><rect x="1114.2" y="373" width="9.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1117.21" y="383.5" ></text>
</g>
<g >
<title>_int_free (8,297,900 samples, 0.16%)</title><rect x="1009.1" y="133" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1012.05" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;::operator* (10,678,117 samples, 0.20%)</title><rect x="23.1" y="485" width="2.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="26.09" y="495.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (7,906,955 samples, 0.15%)</title><rect x="217.0" y="405" width="1.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="219.99" y="415.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (145,018,632 samples, 2.73%)</title><rect x="1025.7" y="469" width="32.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1028.71" y="479.5" >mu..</text>
</g>
<g >
<title>std::__shared_count&lt; (256,623,753 samples, 4.83%)</title><rect x="960.1" y="261" width="56.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="963.07" y="271.5" >std::_..</text>
</g>
<g >
<title>muduo::net::TcpConnection::shutdown (45,206,087 samples, 0.85%)</title><rect x="25.5" y="517" width="10.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="28.46" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Bind&lt;void  (24,452,598 samples, 0.46%)</title><rect x="1139.7" y="469" width="5.4" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1142.69" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (17,118,930 samples, 0.32%)</title><rect x="1135.9" y="421" width="3.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1138.89" y="431.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::end (8,043,367 samples, 0.15%)</title><rect x="218.7" y="421" width="1.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="221.74" y="431.5" ></text>
</g>
<g >
<title>unlink_chunk (9,133,022 samples, 0.17%)</title><rect x="1080.8" y="309" width="2.0" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1083.75" y="319.5" ></text>
</g>
<g >
<title>muduo::net::Socket::accept (17,936,064 samples, 0.34%)</title><rect x="649.8" y="501" width="3.9" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="652.76" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (39,051,395 samples, 0.73%)</title><rect x="385.2" y="453" width="8.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="388.17" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (40,173,690 samples, 0.76%)</title><rect x="479.3" y="389" width="8.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="482.30" y="399.5" ></text>
</g>
<g >
<title>muduo::FileUtil::AppendFile::append (24,357,570 samples, 0.46%)</title><rect x="10.0" y="453" width="5.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.02" y="463.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="373" width="56.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="963.07" y="383.5" >std::_..</text>
</g>
<g >
<title>muduo::net::sockets::shutdownWrite (8,955,498 samples, 0.17%)</title><rect x="25.5" y="501" width="1.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="28.46" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;muduo::net::Socket, std::default_delete&lt;muduo::net::Socket&gt; &gt;::~unique_ptr (19,902,686 samples, 0.37%)</title><rect x="1150.6" y="533" width="4.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1153.64" y="543.5" ></text>
</g>
<g >
<title>muduo::net::Socket::~Socket (27,706,136 samples, 0.52%)</title><rect x="1010.9" y="149" width="6.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1013.89" y="159.5" ></text>
</g>
<g >
<title>std::function&lt;void  (36,250,589 samples, 0.68%)</title><rect x="27.4" y="501" width="8.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="30.44" y="511.5" ></text>
</g>
<g >
<title>muduo::detail::AtomicIntegerT&lt;int&gt;::incrementAndGet (9,221,253 samples, 0.17%)</title><rect x="1172.8" y="389" width="2.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1175.81" y="399.5" ></text>
</g>
<g >
<title>muduo::detail::AtomicIntegerT&lt;int&gt;::getAndAdd (9,221,253 samples, 0.17%)</title><rect x="1172.8" y="357" width="2.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1175.81" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (8,349,873 samples, 0.16%)</title><rect x="21.2" y="485" width="1.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="24.23" y="495.5" ></text>
</g>
<g >
<title>operator new (8,969,914 samples, 0.17%)</title><rect x="486.2" y="245" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="489.23" y="255.5" ></text>
</g>
<g >
<title>muduo::StringPiece::StringPiece (8,349,873 samples, 0.16%)</title><rect x="21.2" y="517" width="1.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="24.23" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_erase_aux (90,877,400 samples, 1.71%)</title><rect x="1085.2" y="453" width="20.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1088.23" y="463.5" ></text>
</g>
<g >
<title>accept4 (50,452,879 samples, 0.95%)</title><rect x="1174.9" y="533" width="11.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1177.86" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_r&lt;void, ProxyServer::ProxyServer (35,569,251 samples, 0.67%)</title><rect x="679.6" y="469" width="7.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="682.64" y="479.5" ></text>
</g>
<g >
<title>std::swap&lt;bool  (8,634,377 samples, 0.16%)</title><rect x="369.6" y="437" width="1.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="372.58" y="447.5" ></text>
</g>
<g >
<title>__find_specmb (7,430,603 samples, 0.14%)</title><rect x="226.5" y="437" width="1.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="229.55" y="447.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (216,529,755 samples, 4.07%)</title><rect x="572.7" y="437" width="48.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="575.67" y="447.5" >std:..</text>
</g>
<g >
<title>lll_mutex_unlock_optimized (9,034,821 samples, 0.17%)</title><rect x="159.9" y="437" width="2.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="162.93" y="447.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,580,582 samples, 0.16%)</title><rect x="638.4" y="453" width="1.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="641.39" y="463.5" ></text>
</g>
<g >
<title>muduo::net::Channel::disableAll (19,428,248 samples, 0.37%)</title><rect x="1017.0" y="533" width="4.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1020.04" y="543.5" ></text>
</g>
<g >
<title>all (5,315,393,186 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, ProxyServer::ProxyServer (18,792,958 samples, 0.35%)</title><rect x="683.4" y="453" width="4.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="686.36" y="463.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (28,071,068 samples, 0.53%)</title><rect x="1051.7" y="453" width="6.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1054.67" y="463.5" ></text>
</g>
<g >
<title>std::function&lt;void  (24,449,137 samples, 0.46%)</title><rect x="10.0" y="501" width="5.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (19,235,824 samples, 0.36%)</title><rect x="31.2" y="469" width="4.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="34.22" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Channel&gt;::operator (107,433,340 samples, 2.02%)</title><rect x="981.3" y="181" width="23.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="984.26" y="191.5" >s..</text>
</g>
<g >
<title>muduo::net::Channel::setCloseCallback (8,634,377 samples, 0.16%)</title><rect x="369.6" y="485" width="1.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="372.58" y="495.5" ></text>
</g>
<g >
<title>operator new (8,094,667 samples, 0.15%)</title><rect x="392.0" y="357" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="395.04" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (33,263,581 samples, 0.63%)</title><rect x="1139.7" y="501" width="7.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1142.69" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_r&lt;void, ProxyServer::ProxyServer (7,642,084 samples, 0.14%)</title><rect x="1148.9" y="501" width="1.7" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1151.94" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (9,745,520 samples, 0.18%)</title><rect x="33.3" y="453" width="2.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="36.33" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, muduo::net::Channel*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (704,726,677 samples, 13.26%)</title><rect x="801.6" y="405" width="156.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="804.64" y="415.5" >std::__detail::_Hash..</text>
</g>
<g >
<title>__strncmp_evex (8,060,307 samples, 0.15%)</title><rect x="19.4" y="517" width="1.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.44" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (6,966,507 samples, 0.13%)</title><rect x="1085.2" y="325" width="1.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1088.23" y="335.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (8,046,472 samples, 0.15%)</title><rect x="570.9" y="453" width="1.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="573.88" y="463.5" ></text>
</g>
<g >
<title>ProxyServer::onSpecialMsg (100,149,834 samples, 1.88%)</title><rect x="17.4" y="533" width="22.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.37" y="543.5" >P..</text>
</g>
<g >
<title>std::function&lt;void  (8,634,377 samples, 0.16%)</title><rect x="369.6" y="453" width="1.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="372.58" y="463.5" ></text>
</g>
<g >
<title>proxy_serve (5,290,944,049 samples, 99.54%)</title><rect x="15.4" y="581" width="1174.6" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="18.43" y="591.5" >proxy_serve</text>
</g>
<g >
<title>muduo::LogStream::operator&lt;&lt; (19,620,280 samples, 0.37%)</title><rect x="1021.4" y="485" width="4.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1024.36" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::shared_ptr (84,707,132 samples, 1.59%)</title><rect x="90.3" y="485" width="18.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="93.29" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::allocate (30,574,413 samples, 0.58%)</title><rect x="631.6" y="389" width="6.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="634.61" y="399.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (9,034,821 samples, 0.17%)</title><rect x="159.9" y="469" width="2.0" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="162.93" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (7,934,913 samples, 0.15%)</title><rect x="1086.8" y="325" width="1.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1089.77" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (21,746,804 samples, 0.41%)</title><rect x="674.8" y="469" width="4.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="677.81" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (8,634,377 samples, 0.16%)</title><rect x="369.6" y="469" width="1.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="372.58" y="479.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::shutdown (33,004,534 samples, 0.62%)</title><rect x="49.6" y="533" width="7.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="52.60" y="543.5" ></text>
</g>
<g >
<title>muduo::LogStream::append (7,826,630 samples, 0.15%)</title><rect x="1066.9" y="437" width="1.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1069.92" y="447.5" ></text>
</g>
<g >
<title>inet_ntop4 (528,591,227 samples, 9.94%)</title><rect x="235.3" y="437" width="117.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="238.30" y="447.5" >inet_ntop4</text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (60,189,580 samples, 1.13%)</title><rect x="161.9" y="469" width="13.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="164.94" y="479.5" ></text>
</g>
<g >
<title>std::swap&lt;bool  (10,756,420 samples, 0.20%)</title><rect x="375.6" y="437" width="2.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="378.63" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (346,250,881 samples, 6.51%)</title><rect x="689.4" y="485" width="76.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="692.44" y="495.5" >std::__s..</text>
</g>
<g >
<title>muduo::LogStream::append (8,082,536 samples, 0.15%)</title><rect x="205.6" y="453" width="1.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="208.60" y="463.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::doPendingFunctors (1,005,558,199 samples, 18.92%)</title><rect x="793.8" y="533" width="223.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="796.81" y="543.5" >muduo::net::EventLoop::doPend..</text>
</g>
<g >
<title>muduo::net::Acceptor::handleRead (2,087,100,528 samples, 39.27%)</title><rect x="177.0" y="549" width="463.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="179.97" y="559.5" >muduo::net::Acceptor::handleRead</text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (15,988,560 samples, 0.30%)</title><rect x="366.0" y="437" width="3.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="369.04" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_r&lt;void, std::_Bind&lt;void  (24,452,598 samples, 0.46%)</title><rect x="1139.7" y="485" width="5.4" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1142.69" y="495.5" ></text>
</g>
<g >
<title>ProxyServer::onConn (42,465,698 samples, 0.80%)</title><rect x="1165.4" y="421" width="9.5" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1168.43" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (40,173,690 samples, 0.76%)</title><rect x="479.3" y="309" width="8.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="482.30" y="319.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::removeConnection (462,622,376 samples, 8.70%)</title><rect x="1021.4" y="517" width="102.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1024.36" y="527.5" >muduo::net::..</text>
</g>
<g >
<title>boost::any::empty (8,215,494 samples, 0.15%)</title><rect x="1124.1" y="421" width="1.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1127.06" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (81,105,802 samples, 1.53%)</title><rect x="981.3" y="117" width="18.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="984.26" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::allocate (8,969,914 samples, 0.17%)</title><rect x="486.2" y="261" width="2.0" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="489.23" y="271.5" ></text>
</g>
<g >
<title>[unknown] (9,040,050 samples, 0.17%)</title><rect x="10.0" y="325" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.02" y="335.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::removeChannel (748,934,446 samples, 14.09%)</title><rect x="793.8" y="501" width="166.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="796.81" y="511.5" >muduo::net::EPollPoll..</text>
</g>
<g >
<title>operator new (10,577,879 samples, 0.20%)</title><rect x="1186.1" y="549" width="2.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1189.06" y="559.5" ></text>
</g>
<g >
<title>operator new (36,601,055 samples, 0.69%)</title><rect x="393.8" y="437" width="8.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="396.84" y="447.5" ></text>
</g>
<g >
<title>[proxy_serve] (7,115,745 samples, 0.13%)</title><rect x="1098.4" y="421" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1101.41" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;void  (30,105,182 samples, 0.57%)</title><rect x="427.2" y="469" width="6.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="430.19" y="479.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::Impl (8,082,536 samples, 0.15%)</title><rect x="205.6" y="421" width="1.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="208.60" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;void  (10,756,420 samples, 0.20%)</title><rect x="375.6" y="453" width="2.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="378.63" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7,642,084 samples, 0.14%)</title><rect x="1148.9" y="517" width="1.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1151.94" y="527.5" ></text>
</g>
<g >
<title>muduo::detail::AtomicIntegerT&lt;int&gt;::addAndGet (9,221,253 samples, 0.17%)</title><rect x="1172.8" y="373" width="2.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1175.81" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Socket&gt;::operator (53,748,131 samples, 1.01%)</title><rect x="1005.1" y="165" width="11.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1008.11" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (7,602,392 samples, 0.14%)</title><rect x="1159.3" y="437" width="1.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1162.35" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (7,934,913 samples, 0.15%)</title><rect x="1086.8" y="293" width="1.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1089.77" y="303.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (7,932,823 samples, 0.15%)</title><rect x="438.6" y="453" width="1.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="441.64" y="463.5" ></text>
</g>
<g >
<title>muduo::Fmt::Fmt&lt;int&gt; (108,354,323 samples, 2.04%)</title><rect x="1027.6" y="421" width="24.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1030.62" y="431.5" >m..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (720,897,338 samples, 13.56%)</title><rect x="800.0" y="469" width="160.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="803.04" y="479.5" >std::_Hashtable&lt;int,..</text>
</g>
<g >
<title>[proxy_serve] (8,821,982 samples, 0.17%)</title><rect x="574.9" y="373" width="2.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="577.95" y="383.5" ></text>
</g>
<g >
<title>main::{lambda (40,585,029 samples, 0.76%)</title><rect x="1057.9" y="453" width="9.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1060.91" y="463.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (53,983,203 samples, 1.02%)</title><rect x="415.2" y="405" width="12.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="418.20" y="415.5" ></text>
</g>
<g >
<title>_int_malloc (8,969,914 samples, 0.17%)</title><rect x="486.2" y="213" width="2.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="489.23" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Bind&lt;void  (8,533,013 samples, 0.16%)</title><rect x="770.3" y="453" width="1.9" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="773.34" y="463.5" ></text>
</g>
<g >
<title>operator new (30,574,413 samples, 0.58%)</title><rect x="631.6" y="373" width="6.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="634.61" y="383.5" ></text>
</g>
<g >
<title>muduo::net::Channel::enableReading (36,192,559 samples, 0.68%)</title><rect x="1155.1" y="517" width="8.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1158.05" y="527.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEvent (181,715,268 samples, 3.42%)</title><rect x="68.8" y="517" width="40.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="71.75" y="527.5" >mud..</text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::lower_bound (216,529,755 samples, 4.07%)</title><rect x="572.7" y="485" width="48.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="575.67" y="495.5" >std:..</text>
</g>
<g >
<title>std::function&lt;void  (87,834,239 samples, 1.65%)</title><rect x="1127.6" y="517" width="19.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1130.57" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_insert_node (372,048,198 samples, 7.00%)</title><rect x="490.1" y="469" width="82.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="493.07" y="479.5" >std::_Rb_..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (36,601,055 samples, 0.69%)</title><rect x="393.8" y="469" width="8.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="396.84" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (8,349,873 samples, 0.16%)</title><rect x="21.2" y="501" width="1.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="24.23" y="511.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,580,582 samples, 0.16%)</title><rect x="638.4" y="469" width="1.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="641.39" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (11,034,612 samples, 0.21%)</title><rect x="1082.8" y="453" width="2.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1085.78" y="463.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (19,620,280 samples, 0.37%)</title><rect x="1021.4" y="437" width="4.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1024.36" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_allocate (52,509,485 samples, 0.99%)</title><rect x="354.4" y="421" width="11.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="357.38" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;void  (81,105,802 samples, 1.53%)</title><rect x="981.3" y="133" width="18.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="984.26" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (8,212,823 samples, 0.15%)</title><rect x="979.4" y="181" width="1.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="982.44" y="191.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (11,612,821 samples, 0.22%)</title><rect x="1127.6" y="373" width="2.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1130.57" y="383.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (24,452,598 samples, 0.46%)</title><rect x="1139.7" y="453" width="5.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1142.69" y="463.5" ></text>
</g>
<g >
<title>_IO_old_init (7,001,442 samples, 0.13%)</title><rect x="191.8" y="373" width="1.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="194.79" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (40,173,690 samples, 0.76%)</title><rect x="479.3" y="325" width="8.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="482.30" y="335.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (8,045,676 samples, 0.15%)</title><rect x="1062.7" y="405" width="1.8" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1065.68" y="415.5" ></text>
</g>
<g >
<title>outstring_func (24,478,131 samples, 0.46%)</title><rect x="1046.2" y="357" width="5.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1049.24" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (67,983,847 samples, 1.28%)</title><rect x="94.0" y="437" width="15.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="97.00" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Channel&gt;::operator (107,433,340 samples, 2.02%)</title><rect x="981.3" y="165" width="23.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="984.26" y="175.5" >s..</text>
</g>
<g >
<title>muduo::Logger::Impl::finish (18,162,211 samples, 0.34%)</title><rect x="220.5" y="421" width="4.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="223.53" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,173,690 samples, 0.76%)</title><rect x="479.3" y="453" width="8.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="482.30" y="463.5" ></text>
</g>
<g >
<title>muduo::MutexLock::lock (211,858,804 samples, 3.99%)</title><rect x="112.9" y="485" width="47.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="115.90" y="495.5" >mudu..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;ProxyServer::ProxyServer (10,577,879 samples, 0.20%)</title><rect x="1186.1" y="565" width="2.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1189.06" y="575.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (26,205,578 samples, 0.49%)</title><rect x="218.7" y="485" width="5.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="221.74" y="495.5" ></text>
</g>
<g >
<title>[unknown] (50,452,879 samples, 0.95%)</title><rect x="1174.9" y="517" width="11.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1177.86" y="527.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::newConnection (2,078,867,108 samples, 39.11%)</title><rect x="178.8" y="517" width="461.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="181.80" y="527.5" >muduo::net::TcpServer::newConnection</text>
</g>
<g >
<title>muduo::net::Channel::setReadCallback (18,587,647 samples, 0.35%)</title><rect x="371.5" y="485" width="4.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="374.50" y="495.5" ></text>
</g>
<g >
<title>muduo::net::sockets::accept (10,335,036 samples, 0.19%)</title><rect x="651.4" y="485" width="2.3" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="654.44" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (34,463,670 samples, 0.65%)</title><rect x="1132.0" y="453" width="7.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1135.04" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, ProxyServer::ProxyServer (7,159,747 samples, 0.13%)</title><rect x="1188.4" y="565" width="1.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1191.41" y="575.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (256,623,753 samples, 4.83%)</title><rect x="960.1" y="421" width="56.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="963.07" y="431.5" >std::_..</text>
</g>
<g >
<title>_int_free (690,468,936 samples, 12.99%)</title><rect x="804.8" y="341" width="153.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="807.80" y="351.5" >_int_free</text>
</g>
<g >
<title>_int_free (8,385,882 samples, 0.16%)</title><rect x="66.9" y="501" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="69.89" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (53,983,203 samples, 1.02%)</title><rect x="415.2" y="421" width="12.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="418.20" y="431.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (80,464,483 samples, 1.51%)</title><rect x="1033.8" y="389" width="17.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1036.81" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (8,254,928 samples, 0.16%)</title><rect x="646.1" y="517" width="1.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="649.11" y="527.5" ></text>
</g>
<g >
<title>_int_free (8,776,818 samples, 0.17%)</title><rect x="33.5" y="405" width="2.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="36.54" y="415.5" ></text>
</g>
<g >
<title>__find_specmb (14,865,086 samples, 0.28%)</title><rect x="450.4" y="437" width="3.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="453.42" y="447.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (29,172,580 samples, 0.55%)</title><rect x="1060.4" y="437" width="6.5" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1063.44" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (256,623,753 samples, 4.83%)</title><rect x="960.1" y="245" width="56.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="963.07" y="255.5" >std::_..</text>
</g>
<g >
<title>__memset_evex_unaligned_erms (8,593,241 samples, 0.16%)</title><rect x="1025.7" y="453" width="1.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1028.71" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (8,410,932 samples, 0.16%)</title><rect x="1147.1" y="469" width="1.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1150.07" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (36,601,055 samples, 0.69%)</title><rect x="393.8" y="485" width="8.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="396.84" y="495.5" ></text>
</g>
<g >
<title>ProxyServer::onDisConn (8,215,494 samples, 0.15%)</title><rect x="1124.1" y="437" width="1.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1127.06" y="447.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::updateChannel (26,129,718 samples, 0.49%)</title><rect x="1157.3" y="501" width="5.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1160.29" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;void  (51,700,575 samples, 0.97%)</title><rect x="163.8" y="421" width="11.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="166.82" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (16,408,873 samples, 0.31%)</title><rect x="411.6" y="437" width="3.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="414.56" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (36,250,589 samples, 0.68%)</title><rect x="27.4" y="485" width="8.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="30.44" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (16,408,873 samples, 0.31%)</title><rect x="411.6" y="469" width="3.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="414.56" y="479.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::~MutexLockGuard (20,766,437 samples, 0.39%)</title><rect x="1068.7" y="469" width="4.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1071.65" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::function&lt;void  (9,785,381 samples, 0.18%)</title><rect x="1073.3" y="421" width="2.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1076.26" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (720,897,338 samples, 13.56%)</title><rect x="800.0" y="453" width="160.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="803.04" y="463.5" >std::_Hashtable&lt;int,..</text>
</g>
<g >
<title>__sprintf (525,470,795 samples, 9.89%)</title><rect x="235.3" y="421" width="116.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="238.30" y="431.5" >__sprintf</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (51,700,575 samples, 0.97%)</title><rect x="163.8" y="389" width="11.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="166.82" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (58,902,443 samples, 1.11%)</title><rect x="986.2" y="101" width="13.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="989.19" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (216,529,755 samples, 4.07%)</title><rect x="572.7" y="405" width="48.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="575.67" y="415.5" >std:..</text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, false&gt;::_Head_base (11,612,821 samples, 0.22%)</title><rect x="1127.6" y="405" width="2.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1130.57" y="415.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::loop (1,119,089,276 samples, 21.05%)</title><rect x="768.6" y="549" width="248.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="771.61" y="559.5" >muduo::net::EventLoop::loop</text>
</g>
<g >
<title>std::function&lt;void  (18,222,203 samples, 0.34%)</title><rect x="653.7" y="501" width="4.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="656.74" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (79,546,655 samples, 1.50%)</title><rect x="620.7" y="485" width="17.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="623.73" y="495.5" ></text>
</g>
<g >
<title>muduo::net::Channel::~Channel (107,433,340 samples, 2.02%)</title><rect x="981.3" y="149" width="23.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="984.26" y="159.5" >m..</text>
</g>
<g >
<title>tcache_get (11,034,612 samples, 0.21%)</title><rect x="1082.8" y="405" width="2.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1085.78" y="415.5" ></text>
</g>
<g >
<title>[unknown] (5,264,451,373 samples, 99.04%)</title><rect x="17.4" y="565" width="1168.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="20.37" y="575.5" >[unknown]</text>
</g>
<g >
<title>muduo::Logger::Impl::formatTime (108,354,323 samples, 2.04%)</title><rect x="1027.6" y="453" width="24.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1030.62" y="463.5" >m..</text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (42,858,115 samples, 0.81%)</title><rect x="1073.3" y="469" width="9.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1076.26" y="479.5" ></text>
</g>
<g >
<title>ProxyServer::onSpecialMsg (8,755,050 samples, 0.16%)</title><rect x="15.4" y="549" width="2.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.43" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;muduo::net::Socket&gt;::operator (19,902,686 samples, 0.37%)</title><rect x="1150.6" y="517" width="4.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1153.64" y="527.5" ></text>
</g>
<g >
<title>muduo::net::EventLoop::queueInLoop (63,624,552 samples, 1.20%)</title><rect x="1068.7" y="485" width="14.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1071.65" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::lower_bound (216,529,755 samples, 4.07%)</title><rect x="572.7" y="469" width="48.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="575.67" y="479.5" >std:..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~_Tuple_impl (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="357" width="1.8" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1140.87" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~tuple (256,623,753 samples, 4.83%)</title><rect x="960.1" y="341" width="56.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="963.07" y="351.5" >std::t..</text>
</g>
<g >
<title>muduo::net::EventLoop::loop (513,168,927 samples, 9.65%)</title><rect x="63.0" y="533" width="114.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="66.05" y="543.5" >muduo::net::Ev..</text>
</g>
<g >
<title>muduo::net::Channel::handleEventWithGuard (533,161,012 samples, 10.03%)</title><rect x="647.9" y="549" width="118.4" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="650.95" y="559.5" >muduo::net::Ch..</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_initialize (15,988,560 samples, 0.30%)</title><rect x="366.0" y="453" width="3.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="369.04" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (9,936,422 samples, 0.19%)</title><rect x="407.3" y="453" width="2.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="410.34" y="463.5" ></text>
</g>
<g >
<title>unlink_chunk (10,678,508 samples, 0.20%)</title><rect x="977.1" y="69" width="2.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="980.07" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;::operator++ (31,512,616 samples, 0.59%)</title><rect x="1098.4" y="437" width="7.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1101.41" y="447.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (28,233,295 samples, 0.53%)</title><rect x="345.7" y="341" width="6.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="348.68" y="351.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (51,700,575 samples, 0.97%)</title><rect x="163.8" y="405" width="11.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="166.82" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (87,229,459 samples, 1.64%)</title><rect x="960.1" y="117" width="19.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="963.07" y="127.5" ></text>
</g>
<g >
<title>muduo::LogFile::append_unlocked (24,357,570 samples, 0.46%)</title><rect x="10.0" y="469" width="5.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="13.02" y="479.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (206,252,810 samples, 3.88%)</title><rect x="574.9" y="389" width="45.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="577.95" y="399.5" >std:..</text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (84,707,132 samples, 1.59%)</title><rect x="90.3" y="469" width="18.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="93.29" y="479.5" ></text>
</g>
<g >
<title>__GI___readv (8,306,134 samples, 0.16%)</title><rect x="644.3" y="517" width="1.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="647.27" y="527.5" ></text>
</g>
<g >
<title>__memset_evex_unaligned_erms (7,075,509 samples, 0.13%)</title><rect x="184.7" y="469" width="1.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="187.70" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (15,988,560 samples, 0.30%)</title><rect x="366.0" y="389" width="3.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="369.04" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_write (9,417,598 samples, 0.18%)</title><rect x="39.6" y="501" width="2.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="42.60" y="511.5" ></text>
</g>
<g >
<title>___snprintf_chk (108,354,323 samples, 2.04%)</title><rect x="1027.6" y="405" width="24.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1030.62" y="415.5" >_..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (26,808,935 samples, 0.50%)</title><rect x="167.4" y="213" width="6.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="170.43" y="223.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000000&gt;::append (8,045,676 samples, 0.15%)</title><rect x="1062.7" y="421" width="1.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1065.68" y="431.5" ></text>
</g>
<g >
<title>_int_free (20,904,286 samples, 0.39%)</title><rect x="974.8" y="85" width="4.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="977.80" y="95.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, muduo::net::TcpServer*, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~_Tuple_impl (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="373" width="1.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1140.87" y="383.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::update (10,373,824 samples, 0.20%)</title><rect x="766.3" y="533" width="2.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="769.31" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (40,173,690 samples, 0.76%)</title><rect x="479.3" y="341" width="8.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="482.30" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (44,463,364 samples, 0.84%)</title><rect x="1088.5" y="421" width="9.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1091.54" y="431.5" ></text>
</g>
<g >
<title>muduo::net::Channel::handleEventWithGuard (16,347,355 samples, 0.31%)</title><rect x="768.6" y="517" width="3.6" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="771.61" y="527.5" ></text>
</g>
<g >
<title>muduo::MutexLockGuard::MutexLockGuard (10,100,542 samples, 0.19%)</title><rect x="1060.4" y="421" width="2.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1063.44" y="431.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (7,826,630 samples, 0.15%)</title><rect x="1066.9" y="453" width="1.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1069.92" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (87,229,459 samples, 1.64%)</title><rect x="960.1" y="133" width="19.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="963.07" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_write (9,417,598 samples, 0.18%)</title><rect x="39.6" y="517" width="2.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="42.60" y="527.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8,494,167 samples, 0.16%)</title><rect x="1130.2" y="453" width="1.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1133.15" y="463.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (8,533,013 samples, 0.16%)</title><rect x="770.3" y="421" width="1.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="773.34" y="431.5" ></text>
</g>
<g >
<title>muduo::net::Buffer::readFd (34,453,875 samples, 0.65%)</title><rect x="640.3" y="549" width="7.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="643.30" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (8,373,183 samples, 0.16%)</title><rect x="35.5" y="517" width="1.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="38.49" y="527.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (35,837,870 samples, 0.67%)</title><rect x="469.3" y="437" width="7.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="472.28" y="447.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,179,060 samples, 0.15%)</title><rect x="1137.9" y="293" width="1.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1140.87" y="303.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (9,076,068 samples, 0.17%)</title><rect x="409.5" y="453" width="2.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="412.54" y="463.5" ></text>
</g>
<g >
<title>main::{lambda (35,237,969 samples, 0.66%)</title><rect x="210.9" y="469" width="7.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="213.92" y="479.5" ></text>
</g>
<g >
<title>malloc_consolidate (25,464,471 samples, 0.48%)</title><rect x="358.4" y="325" width="5.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="361.36" y="335.5" ></text>
</g>
<g >
<title>main::{lambda (40,585,029 samples, 0.76%)</title><rect x="1057.9" y="469" width="9.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1060.91" y="479.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::threadFunc (24,449,137 samples, 0.46%)</title><rect x="10.0" y="485" width="5.4" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (6,966,507 samples, 0.13%)</title><rect x="1085.2" y="293" width="1.6" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1088.23" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_r&lt;void, std::_Bind&lt;void  (8,533,013 samples, 0.16%)</title><rect x="770.3" y="469" width="1.9" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="773.34" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (7,179,160 samples, 0.14%)</title><rect x="433.9" y="469" width="1.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="436.87" y="479.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (8,397,806 samples, 0.16%)</title><rect x="213.2" y="373" width="1.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="216.17" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;muduo::net::TcpConnection,  (8,580,582 samples, 0.16%)</title><rect x="638.4" y="485" width="1.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="641.39" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (6,966,507 samples, 0.13%)</title><rect x="1085.2" y="261" width="1.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1088.23" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, muduo::net::Channel*&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7,208,480 samples, 0.14%)</title><rect x="800.0" y="437" width="1.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="803.04" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (6,966,507 samples, 0.13%)</title><rect x="1085.2" y="341" width="1.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1088.23" y="351.5" ></text>
</g>
<g >
<title>malloc_consolidate (17,732,627 samples, 0.33%)</title><rect x="1078.8" y="325" width="4.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1081.84" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (8,212,823 samples, 0.15%)</title><rect x="979.4" y="165" width="1.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="982.44" y="175.5" ></text>
</g>
<g >
<title>__GI___errno_location (9,067,924 samples, 0.17%)</title><rect x="774.1" y="517" width="2.0" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="777.13" y="527.5" ></text>
</g>
<g >
<title>muduo::Logger::~Logger (48,411,659 samples, 0.91%)</title><rect x="1057.9" y="485" width="10.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1060.91" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (39,051,395 samples, 0.73%)</title><rect x="385.2" y="405" width="8.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="388.17" y="415.5" ></text>
</g>
<g >
<title>tcache_get (8,094,667 samples, 0.15%)</title><rect x="392.0" y="325" width="1.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="395.04" y="335.5" ></text>
</g>
<g >
<title>[unknown] (8,306,134 samples, 0.16%)</title><rect x="644.3" y="501" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="647.27" y="511.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (18,162,211 samples, 0.34%)</title><rect x="220.5" y="469" width="4.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="223.53" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="437" width="56.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="963.07" y="447.5" >std::f..</text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;muduo::net::TcpConnection&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::operator[] (646,401,722 samples, 12.16%)</title><rect x="477.2" y="501" width="143.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="480.24" y="511.5" >std::map&lt;std::__cx..</text>
</g>
<g >
<title>std::function&lt;void  (53,983,203 samples, 1.02%)</title><rect x="415.2" y="469" width="12.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="418.20" y="479.5" ></text>
</g>
<g >
<title>operator delete (7,526,663 samples, 0.14%)</title><rect x="175.3" y="517" width="1.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="178.30" y="527.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (9,040,050 samples, 0.17%)</title><rect x="10.0" y="357" width="2.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="13.02" y="367.5" ></text>
</g>
<g >
<title>_IO_new_file_xsputn (24,357,570 samples, 0.46%)</title><rect x="10.0" y="405" width="5.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.02" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, muduo::net::Channel*, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, muduo::net::Channel*&gt; &gt; &gt;::erase (720,897,338 samples, 13.56%)</title><rect x="800.0" y="485" width="160.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="803.04" y="495.5" >std::unordered_map&lt;i..</text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (11,094,790 samples, 0.21%)</title><rect x="180.4" y="485" width="2.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="183.40" y="495.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (9,034,821 samples, 0.17%)</title><rect x="159.9" y="453" width="2.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="162.93" y="463.5" ></text>
</g>
<g >
<title>muduo::AsyncLogging::append (16,689,524 samples, 0.31%)</title><rect x="215.0" y="421" width="3.7" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="218.04" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (53,032,115 samples, 1.00%)</title><rect x="1163.1" y="501" width="11.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1166.09" y="511.5" ></text>
</g>
<g >
<title>outstring_func (19,612,480 samples, 0.37%)</title><rect x="199.4" y="373" width="4.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="202.38" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (9,785,381 samples, 0.18%)</title><rect x="1073.3" y="437" width="2.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1076.26" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (8,064,811 samples, 0.15%)</title><rect x="622.5" y="453" width="1.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="625.55" y="463.5" ></text>
</g>
<g >
<title>_itoa_word (8,876,649 samples, 0.17%)</title><rect x="1044.3" y="357" width="1.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1047.27" y="367.5" ></text>
</g>
<g >
<title>muduo::net::Poller::assertInLoopThread (28,037,108 samples, 0.53%)</title><rect x="793.8" y="485" width="6.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="796.81" y="495.5" ></text>
</g>
<g >
<title>muduo::operator&lt;&lt; (8,082,536 samples, 0.15%)</title><rect x="205.6" y="469" width="1.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="208.60" y="479.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::~TcpConnection (19,902,686 samples, 0.37%)</title><rect x="1150.6" y="549" width="4.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1153.64" y="559.5" ></text>
</g>
<g >
<title>muduo::detail::FixedBuffer&lt;4000&gt;::append (7,826,630 samples, 0.15%)</title><rect x="1066.9" y="421" width="1.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1069.92" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (24,396,871 samples, 0.46%)</title><rect x="1100.0" y="421" width="5.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1102.99" y="431.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleClose (96,245,171 samples, 1.81%)</title><rect x="1127.6" y="533" width="21.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1130.57" y="543.5" >m..</text>
</g>
<g >
<title>tcache_get (9,101,355 samples, 0.17%)</title><rect x="364.0" y="341" width="2.0" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="367.02" y="351.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (197,430,828 samples, 3.71%)</title><rect x="576.9" y="373" width="43.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="579.91" y="383.5" >__me..</text>
</g>
<g >
<title>std::forward&lt;muduo::net::Buffer*&gt; (8,579,724 samples, 0.16%)</title><rect x="687.5" y="469" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="690.54" y="479.5" ></text>
</g>
<g >
<title>muduo::Logger::Impl::finish (7,826,630 samples, 0.15%)</title><rect x="1066.9" y="469" width="1.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1069.92" y="479.5" ></text>
</g>
<g >
<title>muduo::net::TcpConnection::handleClose (497,887,382 samples, 9.37%)</title><rect x="1017.0" y="549" width="110.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1020.04" y="559.5" >muduo::net::T..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (39,051,395 samples, 0.73%)</title><rect x="385.2" y="485" width="8.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="388.17" y="495.5" ></text>
</g>
<g >
<title>_int_free (10,241,978 samples, 0.19%)</title><rect x="475.0" y="405" width="2.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="477.96" y="415.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (10,350,540 samples, 0.19%)</title><rect x="1071.0" y="421" width="2.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1073.97" y="431.5" ></text>
</g>
<g >
<title>muduo::net::EPollPoller::fillActiveChannels (24,442,162 samples, 0.46%)</title><rect x="788.4" y="517" width="5.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="791.39" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;void  (18,587,647 samples, 0.35%)</title><rect x="371.5" y="453" width="4.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="374.50" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;muduo::net::TcpConnection&gt;::shared_ptr&lt;muduo::net::TcpConnection, void&gt; (8,580,582 samples, 0.16%)</title><rect x="638.4" y="501" width="1.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="641.39" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator (9,294,490 samples, 0.17%)</title><rect x="484.2" y="277" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="487.17" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;::~pair (14,901,420 samples, 0.28%)</title><rect x="1085.2" y="357" width="3.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1088.23" y="367.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (346,250,881 samples, 6.51%)</title><rect x="689.4" y="469" width="76.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="692.44" y="479.5" >std::__s..</text>
</g>
<g >
<title>muduo::net::sockets::shutdownWrite (14,018,288 samples, 0.26%)</title><rect x="53.8" y="485" width="3.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="56.81" y="495.5" ></text>
</g>
<g >
<title>__clone3 (24,449,137 samples, 0.46%)</title><rect x="10.0" y="565" width="5.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>__GI_epoll_ctl (10,062,841 samples, 0.19%)</title><rect x="1155.1" y="485" width="2.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1158.05" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void  (33,072,734 samples, 0.62%)</title><rect x="1075.4" y="405" width="7.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1078.44" y="415.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (8,046,472 samples, 0.15%)</title><rect x="570.9" y="389" width="1.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="573.88" y="399.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (18,153,897 samples, 0.34%)</title><rect x="465.2" y="469" width="4.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="468.25" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_free (16,278,873 samples, 0.31%)</title><rect x="163.8" y="213" width="3.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="166.82" y="223.5" ></text>
</g>
<g >
<title>ProxyServer::onMessage (100,149,834 samples, 1.88%)</title><rect x="17.4" y="549" width="22.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="20.37" y="559.5" >P..</text>
</g>
<g >
<title>muduo::net::TcpConnection::connectEstablished (89,224,674 samples, 1.68%)</title><rect x="1155.1" y="533" width="19.8" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1158.05" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (24,452,598 samples, 0.46%)</title><rect x="1139.7" y="405" width="5.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1142.69" y="415.5" ></text>
</g>
<g >
<title>__vsprintf_internal (525,470,795 samples, 9.89%)</title><rect x="235.3" y="405" width="116.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="238.30" y="415.5" >__vsprintf_int..</text>
</g>
<g >
<title>__vfprintf_internal (62,535,991 samples, 1.18%)</title><rect x="1037.8" y="373" width="13.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1040.79" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (63,302,912 samples, 1.19%)</title><rect x="624.3" y="453" width="14.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="627.34" y="463.5" ></text>
</g>
<g >
<title>muduo::net::TcpServer::newConnection (89,224,674 samples, 1.68%)</title><rect x="1155.1" y="549" width="19.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1158.05" y="559.5" ></text>
</g>
<g >
<title>muduo::MutexLock::unlock (20,766,437 samples, 0.39%)</title><rect x="1068.7" y="453" width="4.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1071.65" y="463.5" ></text>
</g>
<g >
<title>operator new (25,191,512 samples, 0.47%)</title><rect x="1077.2" y="373" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1080.19" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8,494,167 samples, 0.16%)</title><rect x="1130.2" y="421" width="1.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1133.15" y="431.5" ></text>
</g>
<g >
<title>muduo::Timestamp::now (23,000,880 samples, 0.43%)</title><rect x="783.3" y="517" width="5.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="786.28" y="527.5" ></text>
</g>
<g >
<title>__strlen_evex (8,925,975 samples, 0.17%)</title><rect x="228.2" y="469" width="2.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="231.19" y="479.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (8,533,013 samples, 0.16%)</title><rect x="770.3" y="437" width="1.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="773.34" y="447.5" ></text>
</g>
<g >
<title>__strchrnul_evex (14,865,086 samples, 0.28%)</title><rect x="450.4" y="421" width="3.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="453.42" y="431.5" ></text>
</g>
<g >
<title>__GI_shutdown (18,986,246 samples, 0.36%)</title><rect x="49.6" y="501" width="4.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="52.60" y="511.5" ></text>
</g>
<g >
<title>__GI___pthread_disable_asynccancel (8,836,362 samples, 0.17%)</title><rect x="781.3" y="501" width="2.0" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="784.32" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;muduo::net::TcpConnection*,  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="229" width="56.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="963.07" y="239.5" >std::_..</text>
</g>
<g >
<title>__GI__IO_default_xsputn (9,656,452 samples, 0.18%)</title><rect x="455.5" y="421" width="2.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="458.53" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, muduo::net::Channel*&gt;, false&gt; &gt;::deallocate (704,726,677 samples, 13.26%)</title><rect x="801.6" y="373" width="156.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="804.64" y="383.5" >__gnu_cxx::new_alloc..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (6,966,507 samples, 0.13%)</title><rect x="1085.2" y="309" width="1.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1088.23" y="319.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (21,746,804 samples, 0.41%)</title><rect x="674.8" y="453" width="4.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="677.81" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;muduo::net::TcpConnection&gt; &gt; &gt; &gt;::equal_range (84,035,241 samples, 1.58%)</title><rect x="1105.4" y="453" width="18.7" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1108.40" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::function&lt;void  (256,623,753 samples, 4.83%)</title><rect x="960.1" y="485" width="56.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.07" y="495.5" >std::_..</text>
</g>
<g >
<title>std::swap&lt;bool  (18,587,647 samples, 0.35%)</title><rect x="371.5" y="437" width="4.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="374.50" y="447.5" ></text>
</g>
</g>
</svg>
